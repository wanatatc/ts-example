// A. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÅ‡∏•‡∏∞ ‡∏ä‡∏ô‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (Type)

/**
 * primitives types
 * ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
 */

// 1. string
// let userName: string = "John Doe";
// console.log(userName);

// // 2. number
// let age: number = 30;
// console.log(age);

// // 3. boolean
// let isSingle: boolean = true;
// console.log(isSingle);

/**
 * Arrays
 */

// let hobbies: string[] = ["Sports", "Cooking"];
// console.log("hobbies:", hobbies);

// let scores: number[] = [100, 200, 300];
// console.log("scores:", scores);

// let isMarrieds: boolean[] = [true, false, true];
// console.log("isMarrieds:", isMarrieds);

/**
 * any
 * ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * *** ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô : ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ any ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
 */

// let anyType: any = "John Doe";
// console.log("anyType:", anyType);

// anyType = 30;
// console.log("anyType:", anyType);

/**
 * Object
 * ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Object ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô JavaScript ‡∏î‡πâ‡∏ß‡∏¢ property ‡πÑ‡∏î‡πâ
 */

// let person = {
//   name: "John Doe",
//   age: 30,
//   isSingle: true,
//   hobbies: ["Sports", "Cooking"],
// };

// person.name = "Jane Doe";
// person = {...person, age: 40};

// console.log("person", person);

// let {isSingle} = person;

// console.log("isSingle", isSingle);

// B. ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡∏Ñ‡πà‡∏≤ (Type Inference)

// let firstName = "John";
// console.log("firstName:", firstName);

// let lastName = "Doe";
// console.log("lastName:", lastName);

// let isMarried = false;
// console.log("isMarried:", isMarried);

// let numberOfChildren = 0;
// console.log("numberOfChildren:", numberOfChildren);

// C. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå

/**
 * ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
 * @param a ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà 1 ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô number
 * @param b ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà 2 ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô number
 * @returns ‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏Å a + b ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô number
 *
 * ‡∏Å‡∏≤‡∏£ return ‡∏Ñ‡πà‡∏≤ ‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡πá‡πÑ‡∏î‡πâ
 */

// function add(a: number, b: number) {
//   // function add(a: number, b: number) : number {
//   return a + b;
// }

// console.log("add(10, 20)", add(10, 20));

// D. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Interfaces and type annotations)

// interface Person {
//     name: string;
//     age: number;
//     isSingle: boolean;
//     hobbies: string[];
// }

// let person: Person = {
//     name: "John Doe",
//     age: 30,
//     hobbies: ["Sports", "Cooking"],
// };

// console.log("person", person);

// type Person = {
//     name: string;
//     age: number;
//     isSingle: boolean;
//     hobbies: string[];
// };

// let person: Person = {
//     name: "John Doe",
//     age: 30,
//     hobbies: ["Sports", "Cooking"],
// };

/**
 * ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® Function Type
 *
 * ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ => (arrow function) ‡∏Ñ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
 */

// type Add = (a: number, b: number) => number;
// let add: Add = (a: number, b: number) => a + b;

// console.log("add(10, 20)", add(10, 20));

// type Car = {
//   brand: string;
//   drive: () => void;
//   fuelPrice: (price: number) => number;
// };

// let car: Car = {
//   brand: "Toyota",
//   drive: () => console.log("üöó"),
//   fuelPrice: (price: number) => price * 1.5,
// };

// car.drive();
// console.log("car.fuelPrice(100)", car.fuelPrice(100));

/**
 * ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® Index Signature
 *
 * ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Object ‡∏ó‡∏µ‡πà‡∏°‡∏µ property ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
 * ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ [] (square brackets) ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ property ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ
 */

// type PersonData = {
//   [key: number]: string;
// };

// let personData: PersonData = {
//   1: "John Doe",
//   2: "Jane Doe",
// };

// console.log("personData", personData);
// console.log("personData[1]", personData[1]);

// type AnimalData = {
//   [key: string]: string;
//   name: string;
// };

// let animalData: AnimalData = {
//   //name: "Cat",
//   color: "Black",
// };

// console.log("animalData", animalData);
// console.log("animalData.name", animalData.name);
// console.log("animalData.color", animalData.color);

// E. Union ‡πÅ‡∏•‡∏∞ Intersect types

/**
 * ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Union Types)
 *
 * ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ | (pipe) ‡∏Ñ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠ number ‡∏´‡∏£‡∏∑‡∏≠ undifined ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ string | number | undifined
 */

// let mixedUndefined: string | number | boolean | undefined = undefined;

// console.log("mixedUndefined", mixedUndefined);

// mixedUndefined = "John Doe";

// console.log("mixedUndefined", mixedUndefined);

/**
 * ‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Intersect Types)
 *
 * ‡πÉ‡∏ä‡πâ‡∏£‡∏ß‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ & (ampersand) ‡∏Ñ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */

// interface Person {
//   name: string;
//   age: number;
// }

// interface Employee {
//   id: number;
//   department: string;
// }

// type Person = {
//     name: string;
//     age: number;
// };

// type Employee = {
//     id: number;
//     department: string;
// };

// interface PersonEmployee = Person & Employee;

// let personEmployee: PersonEmployee = {
//     name: "John Doe",
//     age: 30,
//     id: 1,
//     department: "IT",
// };

// console.log("personEmployee:", personEmployee)

// F. ‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Type (Type Aliases)

/**
 * ‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Type (Type Aliases)
 *
 * ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡∏à‡∏≤‡∏Å type ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
 */

// type ID = number;

// type Name = string;

// type Person = {
//   id: ID;
//   name: Name;
//   age: number;
// };

// let person: Person = {
//   id: 1,
//   name: "John Doe",
//   age: 30,
// };

// console.log("person", person);

// type Point = {
//   x: number;
//   y: number;
// };

// type Rectangle = {
//   topLeft: Point;
//   bottomRight: Point;
// };

// const rectangle: Rectangle = {
//   topLeft: {x: 0, y: 0},
//   bottomRight: {x: 100, y: 100},
// };

// console.log("rectangle", rectangle);
