// A. ‡∏Ñ‡∏≥‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤ (Enums)

enum Direction {
  Up = "UP",
  Down = "DOWN",
  Left = "LEFT",
  Right = "RIGHT",
}

// Up = 0, Down = 1, Left = 2, Right = 3
// enum Direction {
//   Up,
//   Down,
//   Left,
//   Right,
// }

// // Up = 1, Down = 2, Left = 3, Right = 4
// enum Direction {
//   Up = 1,
//   Down,
//   Left,
//   Right,
// }

// const value = Direction.Up;
// console.log("üöÄ ~ file: index.ts:9 ~ value:", value);

// B. ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Type assertions)
/**
 * ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ó‡∏µ‡πà TypeScript ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å TypeScript ‡∏ß‡πà‡∏≤ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£
 * ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Type assertions ‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ <‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•> ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• as ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î
 *
 * ** ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Type assertions ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 *            ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
 */

// const myCanvas = document.getElementById("main_canvas"); // ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó HTMLElement
// const main = document.getElementById("main") as HTMLDivElement; // ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡πà‡∏≤ ‡πÄ‡∏õ‡πá‡∏ô div element

// C. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Type guards)

/**
 * ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ object ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ ‡∏°‡∏µ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô union type
 * ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ typeof, instanceof, in ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏£‡∏Å‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå (truthiness)
 */

// 1. ‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏£‡∏Å‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå (truthiness)

/**
 * ‡∏´‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô :
 *     0
 *     NaN
 *     "" (the empty string)
 *     0n (the bigint version of zero)
 *     null
 *     undefined
 *
 * ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡πá‡∏à (falsy) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */

const numUsersOnline = 0;

if (numUsersOnline) {
  console.log(`There are ${numUsersOnline} online now!`);
} else {
  console.log("Nobody's here. :(");
}

const textInput = "";

if (textInput) {
  console.log(`You entered: ${textInput}`);
} else {
  console.log("You didn't enter anything.");
}

// D. Nullable types and optional properties
// E. Type narrowing
