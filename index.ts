// A. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÅ‡∏•‡∏∞ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (Type)

/**
 * primitives types
 * ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
 */

// 1. string
// let userName: string = "John Doe";
// console.log(userName);

// // 2. number
// let age: number = 30;
// console.log(age);

// // 3. boolean
// let isSingle: boolean = true;
// console.log(isSingle);

/**
 * Arrays
 */

// let hobbies: string[] = ["Sports", "Cooking"];
// console.log("üöÄ ~ file: index.ts:25 ~ hobbies:", hobbies);

// let scores: number[] = [100, 200, 300];
// console.log("üöÄ ~ file: index.ts:28 ~ scores:", scores);

// let isMarrieds: boolean[] = [true, false, true];
// console.log("üöÄ ~ file: index.ts:31 ~ isMarrieds:", isMarrieds);

/**
 * any
 * ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * *** ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô : ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ any ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
 */

// let anyType: any = "John Doe";
// console.log("üöÄ ~ file: index.ts:40 ~ anyType:", anyType);

// anyType = 30;
// console.log("üöÄ ~ file: index.ts:43 ~ anyType:", anyType);

/**
 * Object
 * ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Object ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô JavaScript ‡∏î‡πâ‡∏ß‡∏¢ property ‡πÑ‡∏î‡πâ
 */

// let person = {
//   name: "John Doe",
//   age: 30,
//   isSingle: true,
//   hobbies: ["Sports", "Cooking"],
// };

// person.name = "Jane Doe";
// person = {...person, age: 40};

// console.log("üöÄ ~ file: index.ts:58 ~ person", person);

// let {isSingle} = person;

// console.log("üöÄ ~ file: index.ts:61 ~ isSingle", isSingle);

/**
 * ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Union Types)
 *
 * ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ | (pipe) ‡∏Ñ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠ number ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ string | number
 * ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠ number ‡∏´‡∏£‡∏∑‡∏≠ undifined ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ string | number | undifined
 */

let mixed: string | number | boolean = "John Doe";
console.log("üöÄ ~ file: index.ts:75 ~ mixed", mixed);

mixed = 30;

console.log("üöÄ ~ file: index.ts:78 ~ mixed", mixed);

let mixedUndefined: string | number | boolean | undefined = undefined;

console.log("üöÄ ~ file: index.ts:82 ~ mixedUndefined", mixedUndefined);

mixedUndefined = "John Doe";

console.log("üöÄ ~ file: index.ts:85 ~ mixedUndefined", mixedUndefined);

// B. ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏î‡∏¢‡∏Ñ‡πà‡∏≤ (Type Inference)

// let firstName = "John";
// console.log("üöÄ ~ file: index.ts:48 ~ firstName:", firstName);

// let lastName = "Doe";
// console.log("üöÄ ~ file: index.ts:51 ~ lastName:", lastName);

// let isMarried = false;
// console.log("üöÄ ~ file: index.ts:54 ~ isMarried:", isMarried);

// let numberOfChildren = 0;
// console.log("üöÄ ~ file: index.ts:57 ~ numberOfChildren:", numberOfChildren);

// C. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå

/**
 * ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
 * @param a ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà 1 ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô number
 * @param b ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà 2 ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô number
 * @returns ‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏Å a + b ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô number
 *
 * ‡∏Å‡∏≤‡∏£ return ‡∏Ñ‡πà‡∏≤ ‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡πá‡πÑ‡∏î‡πâ
 */

// function add(a: number, b: number) {
//   // function add(a: number, b: number) : number {
//   return a + b;
// }

// console.log("üöÄ ~ file: index.ts:74 ~ add(10, 20)", add(10, 20));

// D. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Interfaces and type annotations)

// E. Arrays ‡πÅ‡∏•‡∏∞ tuples
// F. Union ‡πÅ‡∏•‡∏∞ Intersect types
// G. ‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Type (Type Aliases)
